{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    isRegister: Boolean // Флаг для отображения/скрытия поля подтверждения пароля при регистрации\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n      confirmPassword: '',\n      // Поле подтверждения пароля для регистрации\n      errorMessage: '',\n      isRegisterMode: false // Флаг для определения режима (авторизация или регистрация)\n    };\n  },\n  computed: {\n    formTitle() {\n      return this.isRegisterMode ? 'Регистрация' : 'Авторизация';\n    },\n    submitButtonText() {\n      return this.isRegisterMode ? 'Зарегистрироваться' : 'Войти';\n    }\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await this.$axios.post(this.formAction, {\n          username: this.username,\n          password: this.password,\n          confirmPassword: this.confirmPassword\n        });\n        console.log(response.data);\n        // Обработка успешного ответа, например, переход на следующую страницу\n        this.$router.push('/quiz');\n      } catch (error) {\n        if (error.response && error.response.status === 400) {\n          this.errorMessage = 'Неправильное имя пользователя или пароль';\n        } else {\n          this.errorMessage = 'Ошибка при отправке формы';\n        }\n        console.error('Ошибка отправки формы:', error);\n      }\n    },\n    setLoginMode() {\n      this.isRegisterMode = false;\n      this.errorMessage = '';\n    },\n    setRegisterMode() {\n      this.isRegisterMode = true;\n      this.errorMessage = '';\n    }\n  }\n};","map":{"version":3,"names":["props","isRegister","Boolean","data","username","password","confirmPassword","errorMessage","isRegisterMode","computed","formTitle","submitButtonText","methods","submitForm","response","$axios","post","formAction","console","log","$router","push","error","status","setLoginMode","setRegisterMode"],"sources":["/home/aleksandr/PraktikaSportmasterLabQuiz/frontend/src/components/CommonForm.vue"],"sourcesContent":["<template>\n  <div class=\"auth-container\">\n    <h2>{{ formTitle }}</h2>\n\n    <!-- Кнопки выбора операции -->\n    <div class=\"operation-buttons\">\n      <button @click=\"setLoginMode\">Авторизация</button>\n      <button @click=\"setRegisterMode\">Регистрация</button>\n    </div>\n\n    <form v-if=\"!isRegisterMode\" @submit.prevent=\"submitForm\">\n      <div>\n        <label>Имя пользователя:</label>\n        <input type=\"text\" v-model=\"username\">\n      </div>\n      <div>\n        <label>Пароль:</label>\n        <input type=\"password\" v-model=\"password\">\n      </div>\n      <button type=\"submit\">{{ submitButtonText }}</button>\n    </form>\n\n    <form v-if=\"isRegisterMode\" @submit.prevent=\"submitForm\">\n      <div>\n        <label>Имя пользователя:</label>\n        <input type=\"text\" v-model=\"username\">\n      </div>\n      <div>\n        <label>Пароль:</label>\n        <input type=\"password\" v-model=\"password\">\n      </div>\n      <div>\n        <label>Подтвердите пароль:</label>\n        <input type=\"password\" v-model=\"confirmPassword\">\n      </div>\n      <button type=\"submit\">{{ submitButtonText }}</button>\n    </form>\n\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    isRegister: Boolean  // Флаг для отображения/скрытия поля подтверждения пароля при регистрации\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n      confirmPassword: '',  // Поле подтверждения пароля для регистрации\n      errorMessage: '',\n      isRegisterMode: false, // Флаг для определения режима (авторизация или регистрация)\n    };\n  },\n  computed: {\n    formTitle() {\n      return this.isRegisterMode ? 'Регистрация' : 'Авторизация';\n    },\n    submitButtonText() {\n      return this.isRegisterMode ? 'Зарегистрироваться' : 'Войти';\n    }\n  },\n  methods: {\n    async submitForm() {\n  try {\n    const response = await this.$axios.post(this.formAction, {\n      username: this.username,\n      password: this.password,\n      confirmPassword: this.confirmPassword\n    });\n    console.log(response.data);\n    // Обработка успешного ответа, например, переход на следующую страницу\n    this.$router.push('/quiz');\n  } catch (error) {\n    if (error.response && error.response.status === 400) {\n      this.errorMessage = 'Неправильное имя пользователя или пароль';\n    } else {\n      this.errorMessage = 'Ошибка при отправке формы';\n    }\n    console.error('Ошибка отправки формы:', error);\n  }\n}\n,\n    setLoginMode() {\n      this.isRegisterMode = false;\n      this.errorMessage = '';\n    },\n    setRegisterMode() {\n      this.isRegisterMode = true;\n      this.errorMessage = '';\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Стили для компонента */\n.auth-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: #f2f9ff; /* Голубой фон */\n}\n\nh2 {\n  text-align: center;\n}\n\nform {\n  margin-bottom: 20px;\n}\n\n.label {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nbutton {\n  width: 100%;\n  background-color: #007bff; /* Голубой цвет кнопки */\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-top: 10px;\n}\n\nbutton:hover {\n  background-color: #0056b3; /* Темно-голубой цвет при наведении */\n}\n\n.operation-buttons {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\np {\n  color: red;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":";AA2CA,eAAe;EACbA,KAAK,EAAE;IACLC,UAAU,EAAEC,OAAM,CAAG;EACvB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MAAG;MACtBC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE,KAAK,CAAE;IACzB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACF,cAAa,GAAI,aAAY,GAAI,aAAa;IAC5D,CAAC;IACDG,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACH,cAAa,GAAI,oBAAmB,GAAI,OAAO;IAC7D;EACF,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;UACvDb,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,eAAe,EAAE,IAAI,CAACA;QACxB,CAAC,CAAC;QACFY,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACX,IAAI,CAAC;QAC1B;QACA,IAAI,CAACiB,OAAO,CAACC,IAAI,CAAC,OAAO,CAAC;MAC5B,EAAE,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,CAACR,QAAO,IAAKQ,KAAK,CAACR,QAAQ,CAACS,MAAK,KAAM,GAAG,EAAE;UACnD,IAAI,CAAChB,YAAW,GAAI,0CAA0C;QAChE,OAAO;UACL,IAAI,CAACA,YAAW,GAAI,2BAA2B;QACjD;QACAW,OAAO,CAACI,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF;IAEIE,YAAYA,CAAA,EAAG;MACb,IAAI,CAAChB,cAAa,GAAI,KAAK;MAC3B,IAAI,CAACD,YAAW,GAAI,EAAE;IACxB,CAAC;IACDkB,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACjB,cAAa,GAAI,IAAI;MAC1B,IAAI,CAACD,YAAW,GAAI,EAAE;IACxB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}